//Merch.jsx

/*
A component to manage the merch page of the website
*/

//INFO React Libraries
import { useState, useEffect, useRef, useMemo } from "react";
import propTypes from "prop-types";
// import { Link } from "react-router-dom";

//INFO Animation Libraries
import { gsap } from "gsap";

//INFO Image Assets
import noImage from "@assets/images/no-image.webp";

//INFO Widgets
import Variants from "@apis_product_management/products/Variants";

function MerchPage({ addToCart, storeId, isMobile }) {
  const apiUrl = `https://vps.infinitepixel.dev:3082/api/store/${storeId}/products`;

  const [products, setProducts] = useState([]);
  const [confirmationMessage, setConfirmationMessage] = useState("");
  const [messagePosition, setMessagePosition] = useState({ top: 0, left: 0 });
  const [activeCardIndex, setActiveCardIndex] = useState(null);
  const [isAnimating, setIsAnimating] = useState([]);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  // GSAP Ref for the confirmation message
  const confirmRef = useRef(null);
  const cardRefs = useRef([]);
  const modalRef = useRef(null);

  const convertBlobToBase64 = (blob) => {
    if (!blob) return null;

    const byteArray = new Uint8Array(blob.data);
    const base64String = btoa(
      byteArray.reduce((data, byte) => data + String.fromCharCode(byte), "")
    );

    return `data:image/jpeg;base64,${base64String}`;
  };

  //only show cartPopOut on the merch component while it's in the viewport
  useEffect(() => {
    const cartPopOut = document.querySelector(".cart-pop-out");
    const merch = document.getElementById("merch");

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            cartPopOut.style.display = "block";
          } else {
            cartPopOut.style.display = "none";
          }
        });
      },
      { threshold: [0.1, 0.5, 0.9] }
    );

    observer.observe(merch);

    return () => {
      observer.disconnect();
    };
  }, []);

  const handleImageClick = (product) => {
    if (product.image || product.image_url) {
      setSelectedProduct(product);
      setIsModalOpen(true);
    }
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedProduct(null);
  };

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (modalRef.current && !modalRef.current.contains(event.target)) {
        handleCloseModal();
      }
    };

    if (isModalOpen) {
      document.addEventListener("mousedown", handleClickOutside);
    }

    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [isModalOpen]);

  useEffect(() => {
    console.log("fetching products...", storeId);

    fetch(apiUrl, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        store_id: storeId,
      },
      credentials: "include",
    })
      .then((res) => {
        if (!res.ok) {
          throw new Error(`HTTP error! Status: ${res.status}`);
        }
        return res.json();
      })
      .then((data) => {
        setProducts(data);
        setIsAnimating(new Array(data.length).fill(false));
        cardRefs.current = Array(data.length).fill(null);
      })
      .catch((err) => console.error("Fetch error:", err));
  }, [apiUrl, storeId]);

  // Memoize products to prevent unnecessary re-renders
  const memoizedProducts = useMemo(() => products, [products]);

  // GSAP entrance animation for product cards
  useEffect(() => {
    if (memoizedProducts.length > 0) {
      const validRefs = cardRefs.current.filter((ref) => ref !== null);
      if (validRefs.length === memoizedProducts.length) {
        gsap.fromTo(
          validRefs,
          { opacity: 0, y: 50 },
          {
            opacity: 1,
            y: 0,
            stagger: 0.1,
            duration: 0.8,
            ease: "power3.out",
          }
        );
      }
    }
  }, [memoizedProducts]);

  useEffect(() => {
    if (confirmationMessage && activeCardIndex !== null) {
      const tl = gsap.timeline({
        onComplete: () => {
          setIsAnimating((prev) => {
            const updated = [...prev];
            updated[activeCardIndex] = false;
            return updated;
          });
        },
      });

      tl.to(cardRefs.current[activeCardIndex], {
        opacity: 0.5,
        duration: 0.3,
        ease: "power2.out",
      });
      tl.fromTo(
        confirmRef.current,
        { opacity: 0, y: -20 },
        { opacity: 1, y: 0, duration: 0.6, ease: "power2.out" }
      );
      tl.to(confirmRef.current, {
        opacity: 0,
        y: -20,
        duration: 0.6,
        ease: "power2.out",
        delay: 1.5,
      });
      tl.to(cardRefs.current[activeCardIndex], {
        opacity: 1,
        duration: 0.3,
        ease: "power2.out",
      });
    }
  }, [confirmationMessage, activeCardIndex]);

  useEffect(() => {
    cardRefs.current.forEach((card) => {
      if (card) {
        gsap.set(card, { scale: 1 });

        card.addEventListener("mouseenter", () => {
          gsap.to(card, {
            scale: 1.05,
            duration: 0.1,
            ease: "power2.out",
            immediateRender: true,
            overwrite: "auto",
          });
        });

        card.addEventListener("mouseleave", () => {
          gsap.to(card, {
            scale: 1,
            duration: 0.1,
            ease: "power2.out",
            overwrite: "auto",
          });
        });
      }
    });
  }, [memoizedProducts]);

  const handleAddToCart = (product, index) => {
    if (isAnimating[index]) return;

    setIsAnimating((prev) => {
      const updated = [...prev];
      updated[index] = true;
      return updated;
    });

    addToCart({
      ...product,
      selectedSize: product.selectedSize,
      selectedColor: product.selectedColor,
    });

    setConfirmationMessage("");
    setTimeout(() => {
      setConfirmationMessage(`${product.title} added to cart!`);
    }, 0);

    setActiveCardIndex(index);

    const card = cardRefs.current[index];
    if (card) {
      const rect = card.getBoundingClientRect();
      const cardCenterX = rect.left + rect.width / 2;
      const cardCenterY = rect.top + rect.height / 2;

      setMessagePosition({
        top: cardCenterY + window.scrollY,
        left: cardCenterX + window.scrollX,
      });
    }
  };

  let addToCartButton = "bg-lime-600 hover:bg-lime-500";

  return (
    <>
      {isMobile ? (
        <div className="absolute top-20 cart-pop-out"></div>
      ) : (
        <div className="absolute top-52 cart-pop-out"></div>
      )}

      <div
        id="merch"
        className="container z-10 min-h-screen p-4 mx-auto overflow-y-auto"
      >
        <h1 className="mb-8 text-4xl font-bold text-center">Merch</h1>

        <div
          ref={confirmRef}
          className="absolute z-50 p-2 text-center text-white bg-green-500 rounded shadow-lg"
          style={{
            top: `${messagePosition.top}px`,
            left: `${messagePosition.left}px`,
            transform: "translate(-50%, -50%)",
            opacity: 0,
          }}
          role="alert"
          aria-live="assertive"
        >
          {confirmationMessage}
        </div>

        <div className="grid grid-cols-1 gap-6 auto-rows-min sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
          {memoizedProducts.map((product, index) => (
            <div
              key={index}
              ref={(el) => (cardRefs.current[index] = el)}
              className={`duration-50 group relative flex transform flex-col justify-between rounded-lg border border-gray-200 bg-white p-4 shadow-lg transition-transform hover:scale-105 hover:shadow-xl`}
              style={{
                height: "auto",
                alignSelf: "start",
                overflow: "hidden",
              }}
              role="region"
              aria-labelledby={`product-title-${product.id}`}
            >
              <h2
                id={`product-title-${product.id}`}
                className="mb-2 text-2xl font-semibold text-gray-900 transition-colors duration-200 group-hover:text-blue-600"
              >
                {product.title}
              </h2>

              {product.image_url ? (
                <img
                  className="object-cover w-full h-48 mb-4 transition-all duration-200 rounded-lg shadow-sm hover:shadow-md"
                  src={product.image_url}
                  alt={`${product.title} product image`}
                  onClick={() => handleImageClick(product)}
                />
              ) : product.image ? (
                <img
                  className="object-cover w-full h-48 mb-4 transition-all duration-200 rounded-lg shadow-sm hover:shadow-md"
                  src={convertBlobToBase64(product.image)}
                  alt={`${product.title} product image`}
                  onClick={() => handleImageClick(product)}
                />
              ) : (
                <img
                  className="object-cover w-full h-48 mb-4 transition-all duration-200 rounded-lg shadow-sm hover:shadow-md"
                  src={noImage}
                  alt="No image available"
                />
              )}
              <Variants
                product={product}
                products={memoizedProducts}
                setProducts={setProducts}
              />
              <p className="mb-4 text-sm leading-relaxed text-gray-700">
                {product.description.length > 20
                  ? product.description.substring(0, 30) + "..."
                  : product.description}
              </p>
              <button
                onClick={() => handleAddToCart(product, index)}
                className={`w-full rounded bg-gradient-to-r ${addToCartButton} py-2 text-white transition-all duration-400 hover:bg-gradient-to-l focus:outline-none focus:ring-2 focus:ring-blue-400 ${
                  isAnimating[index] ? "cursor-not-allowed opacity-50" : ""
                }`}
                disabled={isAnimating[index]}
                aria-disabled={isAnimating[index]}
                aria-label={`Add ${product.title} to cart`}
              >
                Add to Cart
              </button>
            </div>
          ))}
        </div>

        {isModalOpen && selectedProduct && (
          <div
            className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-75"
            role="dialog"
            aria-modal="true"
            aria-labelledby="modal-title"
          >
            <div
              className="relative w-full max-w-lg max-h-screen p-4 mx-auto overflow-y-auto text-black bg-white rounded-lg shadow-lg md:p-6"
              ref={modalRef}
              role="document"
            >
              <button
                onClick={handleCloseModal}
                className="absolute p-2 text-2xl font-bold right-4 top-4 md:text-lg"
                aria-label="Close modal"
              >
                &times;
              </button>
              <img
                className="object-contain w-full h-60 md:h-96"
                src={
                  selectedProduct.image_url ||
                  convertBlobToBase64(selectedProduct.image)
                }
                alt={selectedProduct.title}
              />
              <h2
                id="modal-title"
                className="mt-4 text-xl font-semibold text-center md:text-2xl"
              >
                {selectedProduct.title}
              </h2>
              <p className="mt-2 text-sm text-center md:text-base">
                {selectedProduct.description}
              </p>
              <p className="mt-2 text-lg font-bold text-center">
                Price: ${selectedProduct.price}
              </p>
            </div>
          </div>
        )}
      </div>
    </>
  );
}

MerchPage.propTypes = {
  storeId: propTypes.number.isRequired,
  addToCart: propTypes.func.isRequired,
  isMobile: propTypes.bool.isRequired,
};

export default MerchPage;
